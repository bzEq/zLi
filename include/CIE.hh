#ifndef _ZLI_CIE_HH_
#define _ZLI_CIE_HH_
#include "diagram2d.hh"
#include "math.hh"

namespace zLi {
class CIE {
public:
  static const Float XYZ2RGB[3][3];
  static const Float RGB2XYZ[3][3];

  static constexpr const Float CMF_R_X[] = {
      380, 385, 390, 395, 400, 405, 410, 415, 420, 425, 430, 435, 440, 445,
      450, 455, 460, 465, 470, 475, 480, 485, 490, 495, 500, 505, 510, 515,
      520, 525, 530, 535, 540, 545, 550, 555, 560, 565, 570, 575, 580, 585,
      590, 595, 600, 605, 610, 615, 620, 625, 630, 635, 640, 645, 650, 655,
      660, 665, 670, 675, 680, 685, 690, 695, 700, 705, 710, 715, 720, 725,
      730, 735, 740, 745, 750, 755, 760, 765, 770, 775, 780};
  static constexpr const Float CMF_R_Y[] = {
      0.0000,  0.0001,  0.0001,  0.0002,  0.0003,  0.0005,  0.0008,  0.0014,
      0.0021,  0.0027,  0.0022,  0.0004,  -0.0026, -0.0067, -0.0121, -0.0187,
      -0.0261, -0.0332, -0.0393, -0.0447, -0.0494, -0.0536, -0.0581, -0.0641,
      -0.0714, -0.0812, -0.0890, -0.0936, -0.0926, -0.0847, -0.0710, -0.0532,
      -0.0315, -0.0061, 0.0228,  0.0551,  0.0906,  0.1284,  0.1677,  0.2072,
      0.2456,  0.2799,  0.3093,  0.3318,  0.3443,  0.3476,  0.3397,  0.3227,
      0.2971,  0.2635,  0.2268,  0.1923,  0.1597,  0.1291,  0.1017,  0.0786,
      0.0593,  0.0437,  0.0315,  0.0229,  0.0169,  0.0119,  0.0082,  0.0057,
      0.0041,  0.0029,  0.0021,  0.0015,  0.0011,  0.0007,  0.0005,  0.0004,
      0.0003,  0.0002,  0.0001,  0.0001,  0.0001,  0.0000,  0.0000,  0.0000,
      0.0000};
  static constexpr const int CMF_SAMPLES_SIZE = sizeof(CMF_R_X);

  static constexpr const Float CMF_G_X[] = {
      380, 385, 390, 395, 400, 405, 410, 415, 420, 425, 430, 435, 440, 445,
      450, 455, 460, 465, 470, 475, 480, 485, 490, 495, 500, 505, 510, 515,
      520, 525, 530, 535, 540, 545, 550, 555, 560, 565, 570, 575, 580, 585,
      590, 595, 600, 605, 610, 615, 620, 625, 630, 635, 640, 645, 650, 655,
      660, 665, 670, 675, 680, 685, 690, 695, 700, 705, 710, 715, 720, 725,
      730, 735, 740, 745, 750, 755, 760, 765, 770, 775, 780};
  static constexpr const Float CMF_G_Y[] = {
      0.0000,  0.0000,  0.0000,  -0.0001, -0.0001, -0.0002, -0.0004, -0.0007,
      -0.0011, -0.0014, -0.0012, -0.0002, 0.0015,  0.0038,  0.0068,  0.0105,
      0.0149,  0.0198,  0.0254,  0.0318,  0.0391,  0.0471,  0.0569,  0.0695,
      0.0854,  0.1059,  0.1286,  0.1526,  0.1747,  0.1911,  0.2032,  0.2108,
      0.2147,  0.2149,  0.2118,  0.2059,  0.1970,  0.1852,  0.1709,  0.1543,
      0.1361,  0.1169,  0.0975,  0.0791,  0.0625,  0.0478,  0.0356,  0.0258,
      0.0183,  0.0125,  0.0083,  0.0054,  0.0033,  0.0020,  0.0012,  0.0007,
      0.0004,  0.0002,  0.0001,  0.0001,  0.0000,  0.0000,  0.0000,  0.0000,
      0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,
      0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,
      0.0000};

  static constexpr const Float CMF_B_X[] = {
      380, 385, 390, 395, 400, 405, 410, 415, 420, 425, 430, 435, 440, 445,
      450, 455, 460, 465, 470, 475, 480, 485, 490, 495, 500, 505, 510, 515,
      520, 525, 530, 535, 540, 545, 550, 555, 560, 565, 570, 575, 580, 585,
      590, 595, 600, 605, 610, 615, 620, 625, 630, 635, 640, 645, 650, 655,
      660, 665, 670, 675, 680, 685, 690, 695, 700, 705, 710, 715, 720, 725,
      730, 735, 740, 745, 750, 755, 760, 765, 770, 775, 780};
  static constexpr const Float CMF_B_Y[] = {
      0.0012,  0.0019,  0.0036,  0.0065,  0.0121,  0.0197,  0.0371,  0.0664,
      0.1154,  0.1858,  0.2477,  0.2901,  0.3123,  0.3186,  0.3167,  0.3117,
      0.2982,  0.2730,  0.2299,  0.1859,  0.1449,  0.1097,  0.0826,  0.0625,
      0.0478,  0.0369,  0.0270,  0.0184,  0.0122,  0.0083,  0.0055,  0.0032,
      0.0015,  0.0002,  -0.0006, -0.0011, -0.0013, -0.0014, -0.0014, -0.0012,
      -0.0011, -0.0009, -0.0008, -0.0006, -0.0005, -0.0004, -0.0003, -0.0002,
      -0.0002, -0.0001, -0.0001, -0.0001, 0.0000,  0.0000,  0.0000,  0.0000,
      0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,
      0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,
      0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,
      0.0000};

  static_assert(sizeof(CMF_R_X) == CMF_SAMPLES_SIZE,
                "inconsistent sample size");
  static_assert(sizeof(CMF_R_Y) == CMF_SAMPLES_SIZE,
                "inconsistent sample size");
  static_assert(sizeof(CMF_G_X) == CMF_SAMPLES_SIZE,
                "inconsistent sample size");
  static_assert(sizeof(CMF_G_Y) == CMF_SAMPLES_SIZE,
                "inconsistent sample size");
  static_assert(sizeof(CMF_B_X) == CMF_SAMPLES_SIZE,
                "inconsistent sample size");
  static_assert(sizeof(CMF_B_Y) == CMF_SAMPLES_SIZE,
                "inconsistent sample size");
};
}
#endif
